Rust Server Monitor ‚Äî Full Documentation

Overview:
The Rust Server Monitor is a Python script that continuously monitors a Rust game server using the A2S_INFO (Source Engine Query) protocol. It can detect if the server is UP or DOWN, logs the results to a file, and sends real-time Discord notifications for every ping.

Features:
	‚Ä¢	Continuously monitors a Rust server using UDP A2S queries
	‚Ä¢	Detects server UP/DOWN status
	‚Ä¢	Sends Discord notifications for every ping
	‚Ä¢	Logs status with timestamps to a log file
	‚Ä¢	Interactive terminal input for server IP/domain and port
	‚Ä¢	Customizable ping interval
	‚Ä¢	Supports server addresses in the format host:port (e.g., biweekly.eu.moose.gg:28010)

Requirements:
	‚Ä¢	Python 3.8+
	‚Ä¢	Python packages:
	‚Ä¢	aiohttp (for async Discord notifications)

Install dependencies with:
pip install aiohttp

Usage:
	1.	Run the script:
python Rust Ping.py
	2.	Enter the server address when prompted:
üåê Enter server IP or domain:port (e.g., biweekly.eu.moose.gg:28010):
	3.	Enter the ping interval in seconds (optional, default is 10):
‚è≥ Ping interval in seconds (default 10):
	4.	The script will:
	‚Ä¢	Continuously ping the server every interval seconds
	‚Ä¢	Log results to a file named host_port_ping.log
	‚Ä¢	Send Discord notifications on every ping

Example Run:
python Rust Ping.py
üåê Enter server IP or domain:port (e.g., biweekly.eu.moose.gg:28010): biweekly.eu.moose.gg:28010
‚è≥ Ping interval in seconds (default 10): 5
üéÆ Monitoring Rust server biweekly.eu.moose.gg:28010 every 5s ‚Äî Press Ctrl+C to stop
2025-10-16T17:10:23+00:00 üü¢ biweekly.eu.moose.gg:28010 is UP ‚Äî Rusty Moose EU Biweekly
üì® Discord notification sent (UP)

Code Structure:
	‚Ä¢	DISCORD_WEBHOOK ‚Äî hard-coded webhook URL for sending notifications
	‚Ä¢	now_iso() ‚Äî returns the current UTC timestamp
	‚Ä¢	send_discord_webhook(content) ‚Äî asynchronously sends a message to Discord
	‚Ä¢	query_rust_server(host, port, timeout) ‚Äî sends A2S_INFO query, returns server status
	‚Ä¢	monitor(host, port, interval, logfile) ‚Äî main monitoring loop, logs status and sends notifications
	‚Ä¢	parse_host_port(address, default_port) ‚Äî parses host:port string
	‚Ä¢	main() ‚Äî interactive prompts and starts the monitoring loop

Logging:
	‚Ä¢	Log file format: host_port_ping.log
	‚Ä¢	Example entry:
2025-10-16T17:10:23+00:00 biweekly.eu.moose.gg:28010 UP
2025-10-16T17:10:28+00:00 biweekly.eu.moose.gg:28010 DOWN

Discord Notifications:
	‚Ä¢	Sends a notification on every ping
	‚Ä¢	Example UP notification:
‚úÖ Rust Server is UP
biweekly.eu.moose.gg:28010
Name: Rusty Moose EU Biweekly
üïí 2025-10-16T17:10:23+00:00
	‚Ä¢	Example DOWN notification:
‚ùå Rust Server is DOWN
biweekly.eu.moose.gg:28010
üïí 2025-10-16T17:11:23+00:00

Notes & Tips:
	‚Ä¢	Keep your Discord webhook secret. Do not upload it publicly.
	‚Ä¢	Some Rust servers use game port + 1 for queries.
	‚Ä¢	Stop monitoring safely with Ctrl + C.

License:
This project is open-source and free to use.