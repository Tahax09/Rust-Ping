Rust Server Monitor ‚Äî Full Documentation
========================================

OVERVIEW
--------
This project contains two versions of a Rust server monitor:

1. CMD Version ‚Äî A Python script that continuously pings a Rust server using the A2S_INFO (Source Engine Query) protocol. Logs results locally and optionally sends notifications to a Discord webhook.
2. Discord Bot Version ‚Äî A Discord bot that monitors Rust servers and reports real-time UP/DOWN status directly in a Discord channel with slash commands.

Both versions detect server status, timestamp pings, and allow monitoring multiple servers.

---

CMD VERSION
-----------
### Features
- Continuously monitors a Rust server via UDP A2S queries.
- Detects server UP/DOWN status.
- Sends Discord notifications using a webhook on every ping.
- Logs status with timestamps to a log file.
- Interactive terminal prompts for server IP/domain and port.
- Customizable ping interval.
- Supports server addresses in the format host:port (e.g., biweekly.eu.moose.gg:28010).

### Requirements
- Python 3.8+
- Python packages:
  - aiohttp (for async Discord notifications)

Install dependencies:
pip install aiohttp

### Usage
1. Run the script:
python Rust Ping.py
2. Enter the server address when prompted:
üåê Enter server IP or domain:port (e.g., biweekly.eu.moose.gg:28010):
3. Enter the ping interval (optional, default 10s):
‚è≥ Ping interval in seconds (default 10):
4. The script will:
   - Continuously ping the server.
   - Log results to a file named host_port_ping.log.
   - Send Discord notifications on every ping.

### Logging
- Log file format: host_port_ping.log
- Example entry:
2025-10-16T17:10:23+00:00 biweekly.eu.moose.gg:28010 UP
2025-10-16T17:10:28+00:00 biweekly.eu.moose.gg:28010 DOWN

---

DISCORD BOT VERSION
------------------
### Features
- Monitor Rust servers using Discord slash commands.
- /monitor ‚Äî start monitoring a Rust server (host:port format, default port 28015).
- /stop ‚Äî stop all monitoring tasks in the current channel (no IP needed).
- Continuous pinging with real-time UP/DOWN notifications.
- Guild-specific command sync for faster command registration.
- Logs server status internally per ping task (messages in Discord).

### Requirements
- Python 3.8+
- Python packages:
  - discord.py
- A Discord bot with a valid token.
- Optional: Guild ID for faster slash command registration.

### Bot Setup
1. Clone the repository:
git clone <repo_url>
cd Rust-Ping
2. Install dependencies:
pip install discord.py
3. Set your bot token and guild ID in the code:
BOT_TOKEN = "YOUR_BOT_TOKEN"
GUILD_ID = 123456789012345678
4. Run the bot:
python rust_monitor_bot.py
5. Type `/` in your Discord server to see available commands.

### Commands
- /monitor server:host:port interval:seconds
  - Starts monitoring a Rust server.
  - Sends immediate acknowledgement.
- /stop
  - Stops all active monitoring tasks in the channel.
  - No server IP required.

### Invite Link
https://discord.com/oauth2/authorize?client_id=1428447400636190720&permissions=2147551232&integration_type=0&scope=bot+applications.commands

---

NOTES
-----
- Each server ping sends a new message in Discord.
- Multiple servers can be monitored simultaneously.
- /stop cancels all tasks in the current channel.
- CMD version supports both terminal logs and webhook notifications.
- Keep your Discord webhook secret. Do not upload it publicly.

---

LICENSE
-------
MIT License ‚Äî open-source and free to use.